image:
  repository: k8sathome/qbittorrent
  tag: v4.3.3
  pullPolicy: IfNotPresent

env:
  # Our qBittorrent image has a feature that can wait for the VPN to be connected before actually starting the application.
  # It does this by checking the contents of a file /shared/vpnstatus to contain the string 'connected'.
  WAIT_FOR_VPN: "true"

persistence:
  config:
    enabled: true
    mountPath: /config
    storageClass: qbittorrent-config-storage-class
    accessMode: ReadWriteOnce
    size: 1Gi
    subPath: ""
    ## Do not delete the pvc upon helm uninstall
    skipuninstall: false
  downloads:
    enabled: true
    storageClass: qbittorrent-downloads-storage-class
    accessMode: ReadWriteMany
    size: 10Gi
    subPath: ""
    ## Do not delete the pvc upon helm uninstall
    skipuninstall: false
  # This should be enabled so that both the qBittorrent and OpenVPN container have access to a shared volume mounted to /shared.
  # It will be used to communicate between the two containers.
  shared:
    enabled: true
    emptyDir: true  
    mountPath: /shared

addons:
  vpn:
    enabled: true
    # This Should be set to `openvpn`. This will set the add-on to use the default settings for OpenVPN based connections.
    type: openvpn

    openvpn:
      # This gets read by the Helm chart. The default OpenVPN image reads this and uses it to connect to the VPN provider.
      auth: |
        myuser
        mypassword

    # If the podSecurityContext is set to run as a different user, make sure to run the OpenVPN container as root. 
    # This is required for it to be able to read certain configuration files. 
    securityContext:
      runAsGroup: 0
      runAsUser: 0

    env:
      # Set this environment variable to 'on' to make sure all traffic gets routed through the VPN container.
      # Make sure to check the other environment variables for the OpenVPN image to see how you can exclude certain
      # traffic from these firewall rules.
      FIREWALL: 'on'

    # The .ovpn file provided by your VPN provider goes here.
    #
    # Any CA / certificate must either be placed inline, or provided through an additionalVolumeMount so that OpenVPN can find it.
    #
    # Pay close attention to the last 3 lines in this file. They must be added if you wish to run a script when the connection
    # is opened / closed.
    configFile: |-
      remote ca.vpn.btguard.com 1194
      client
      dev tun
      proto udp
      resolv-retry infinite
      nobind
      persist-key
      verb 3
      mute 3
      auth-user-pass /config/openvpn/btguard.login.conf
      mute-replay-warnings
      float
      cipher AES-256-CBC
      auth SHA512
      fast-io
      pull

      <ca>
      -----BEGIN CERTIFICATE-----
      IIDQTCCAimgAwIBAgIJAJV9QqE+ZzsXMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNV
      BAMMD3Zwbi5idGd1YXJkLmNvbTAeFw0yMDA4MDUxMzUzNDhaFw00MTAyMTYxMzUz
      NDhaMBoxGDAWBgNVBAMMD3Zwbi5idGd1YXJkLmNvbTCCASIwDQYJKoZIhvcNAQEB
      BQADggEPADCCAQoCggEBAMxVmPrlfsHocRYR1D/kOj47ZRZDv2XG2Z5rkq1ode/a
      jMSV082EqKhhIE2o6f03abXhWe8VSoM2ZPoB0818x7WIYeoXzaHJQooZTyKjCpm2
      8Fz/XDvyShZpyKUZPjuoo9UxNWDEhnMHJegtL9ccJGXWRrbgUjvrOsiyiiAolftu
      8MjSYRTveuARxMyIlMNAXMaG2r3H2tM1QGoDdCn6FaMBYl4JOExXsOtofjGcRxcb
      MLQLYkORwTwx7TGTacQizsFxg9pSF7jNQwgHtIjZ5fY6SLgmFHEFOaP0mbuHTF9I
      6e58ACbkJ4wuk4IVTXup80c8Zsr+yBFGM8pB5pqEBj0CAwEAAaOBiTCBhjAdBgNV
      HQ4EFgQUhHt2BX7StG7Op1OaZCosAicYJvMwSgYDVR0jBEMwQYAUhHt2BX7StG7O
      p1OaZCosAicYJvOhHqQcMBoxGDAWBgNVBAMMD3Zwbi5idGd1YXJkLmNvbYIJAJV9
      QqE+ZzsXMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUA
      A4IBAQDB/OX+2GJB1Zql1DNVoQst1V/5y/AzKUclCpQb5VVpGU3hrXw1GD/HnVaU
      Mwq8e+C9+FgJNXh0LtpOuksr7YD0IMie4h0rXh1U8tLk1Zh5gLcq5RPee/CK44Qs
      E2X5BUdWfOyL4AkoBAvk2roy25plk4rlOLleUKsHl1qqXMB/o3n+o90pnRKsYZZ4
      PAZGB39DDO9ANTX/CzRXC+GKpTnmEB5KiIJzuDCHI9HeEv9LTGMhZaCvSjJhPuA9
      VuotY2nOSJ9jO/K7aa2Q9dXVbKXYWo29nq0EUGomo/WwzX8ABAP/RLyESDDIukFA
      T1Ip5RClcWgkxPlQdzCxhGJ5iEJ0
      -----END CERTIFICATE-----
      </ca>
      
      script-security 2
      up /vpn/up.sh
      down /vpn/down.sh

    # The scripts that get run when the VPN connection opens/closes are defined here.
    # The default scripts will write a string to represent the current connection state to a file.
    # Our qBittorrent image has a feature that can wait for this file to contain the word 'connected' before actually starting the application.
    scripts:
      up: |-
        #!/bin/bash
        /etc/openvpn/up.sh
        echo "connected" > /shared/vpnstatus

      down: |-
        #!/bin/bash
        /etc/openvpn/down.sh
        echo "disconnected" > /shared/vpnstatus

guiService:
  type: LoadBalancer
  port: 8080
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}
  labels: {}
  ## Use loadBalancerIP to request a specific static IP,
  ## otherwise leave blank
  ##
  loadBalancerIP: 192.168.6.25
  # loadBalancerSourceRanges: []
  ## Set the externalTrafficPolicy in the Service to either Cluster or Local
  # externalTrafficPolicy: Cluster
